name: CI Suite

on:
  pull_request:
    branches:
      - master
  merge_group:
    branches:
      - master

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  start_gate:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Start Gate
    runs-on: ubuntu-24.04
    steps:
      - name: Mandatory Empty Step
        run: exit 0

  run_linters:
    name: Run Linters
    needs: start_gate
    uses: ./.github/workflows/run_linters.yml

  dreamchecker:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: DreamChecker
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Restore SpacemanDMM Cache
        uses: actions/cache@v4
        with:
          path: ~/SpacemanDMM
          key: ${{ runner.os }}-dreamchecker-${{ hashFiles('dependencies.sh')}}
          restore-keys: ${{ runner.os }}-dreamchecker

      - name: Install Dependencies
        run: |
          tools/ci/install_spaceman_dmm.sh dreamchecker

      - name: Run Linter
        id: linter
        run: |
          ~/dreamchecker > ${GITHUB_WORKSPACE}/output-annotations.txt 2>&1

      - name: Annotate Linter
        uses: yogstation13/DreamAnnotate@v2
        if: always()
        with:
          outputFile: output-annotations.txt

  odlint:
    name: Lint with OpenDream
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9
      - uses: actions/checkout@v4
      - uses: robinraju/release-downloader@v1.12
        with:
          repository: "OpenDreamProject/OpenDream"
          tag: "latest"
          fileName: "DMCompiler_linux-x64.tar.gz"
          extract: true
      - run: ./DMCompiler_linux-x64/DMCompiler --suppress-unimplemented vorestation.dme

  unit_tests:
    timeout-minutes: 30
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    strategy:
      matrix:
        map: ['USE_MAP_TETHER', 'USE_MAP_STELLARDELIGHT', 'USE_MAP_GROUNDBASE']
    # name: Integration Tests (${{ matrix.map }})
    name: Integration Tests
    # needs: ['run_linters', 'dreamchecker']
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Ensure +x on CI directory
        run: |
          chmod -R +x ./tools/ci
      - name: Restore BYOND from Cache
        uses: ./.github/actions/restore_or_install_byond
        with:
          major: ${{ inputs.major }}
          minor: ${{ inputs.minor }}
      - name: Install RUST_G Dependencies
        run: |
          sudo dpkg --add-architecture i386
          sudo apt update || true
          sudo apt install zlib1g-dev:i386
          ldd librust_g.so
          ldd libbapi_dmm_reader.so
          ldd libverdigris.so
      - name: Unit Tests
        id: run_tests
        run: tools/ci/compile_and_run.sh
        env:
          EXTRA_ARGS: "-DUNIT_TESTS -D${{ matrix.map }}"
          RUN: "1"
      - name: On test fail, write a step summary
        if: always() && steps.run_tests.outcome == 'failure'
        run: |
          # Get a JSON array of failed unit tests
          FAILED_UNIT_TESTS=$(jq 'to_entries | map(.value | select(.status == 1))' data/unit_tests.json)

          FAIL_COUNT=$(echo $FAILED_UNIT_TESTS | jq 'length')

          echo "# Test failures" >> $GITHUB_STEP_SUMMARY
          echo "$FAIL_COUNT tests failed." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          for i in $( seq $FAIL_COUNT ); do
            CURRENT_FAIL=$(echo $FAILED_UNIT_TESTS | jq --arg i $i '.[($i | tonumber) - 1]')

            TEST=$(echo $CURRENT_FAIL | jq --raw-output '.name')

            echo "### $TEST" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo $CURRENT_FAIL | jq --raw-output '.message' >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          done

  extra_map_tests:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Map Tests
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - name: Ensure +x on CI directory
        run: |
          chmod -R +x ./tools/ci
      - name: Restore BYOND from Cache
        uses: ./.github/actions/restore_or_install_byond
        with:
          major: ${{ inputs.major }}
          minor: ${{ inputs.minor }}
      - name: Compile POIs
        run: tools/ci/compile_and_run.sh
        env:
          EXTRA_ARGS: "-DMAP_TEST"
          RUN: "0"
      - name: Compile away missions
        run: tools/ci/compile_and_run.sh
        env:
          EXTRA_ARGS: "-DAWAY_MISSION_TEST -DUSE_MAP_TETHER" # Only Tether has support for all away missions
          RUN: "0"

  tests_successful:
    if: ( !contains(github.event.head_commit.message, '[ci skip]') )
    name: Integration Tests
    needs: ['run_linters', 'dreamchecker', 'unit_tests', 'extra_map_tests']
    runs-on: ubuntu-24.04
    steps:
      - name: Report Success
        run: |
          echo "Jobs Successful!"
