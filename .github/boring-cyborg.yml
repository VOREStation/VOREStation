##### Labeler ##########################################################################################################
# Enable "labeler" for your PR that would add labels to PRs based on the paths that are modified in the PR.
# * matches anything but /
# ** matches anything including /

labelPRBasedOnFilePath:
  # Add 'Type: Map' to any changes to .dmm files
  "Type: Map":
    - '**/*.dmm'

  # Add 'Type: Map' to any changes to image files
  "Type: Icon":
    - '**/*.dmi'
    - '**/*.png'
    - '**/*.jpg'

  # Add 'Type: Sound' to any change to sound files
  "Type: Sound":
    - '**/*.ogg'
    - '**/*.mp3'
    - '**/*.wav'

  # Add 'Type: Fluff' to any change to *custom_items*
  "Type: Fluff":
    - '**/*custom_items*'
    - '**/*loadout_fluff*'
    - 'config/alienwhitelist.txt'
    - 'config/jobwhitelist.txt'
    - 'config/custom_sprites.txt'

  # Contains changes to system folders
  "Type: .git or .github":
    - '.github/**'
    - '.git/**'

##### Greetings ########################################################################################################
# Comment to be posted to welcome users when they open their first PR
firstPRWelcomeComment: >
  Thanks for making your first PR! Please make sure you've read the contribution guidelines as well.

# Comment to be posted to congratulate user on their first merged PR
firstPRMergeComment: >
  Awesome work, congrats on your first merged pull request!

# Comment to be posted to on first time issues
firstIssueWelcomeComment: >
  Thanks for opening your first issue here! Be sure to follow the issue template!

###### IssueLink Adder #################################################################################################
# Insert Issue (Jira/Github etc) link in PR description based on the Issue ID in PR title.
#insertIssueLinkInPrDescription:
#   # specify the placeholder for the issue link that should be present in the description
#  descriptionIssuePlaceholderRegexp: "^Issue link: (.*)$"
#  matchers:
#    # you can have several matches - for different types of issues
#    # only the first matching entry is replaced
#    jiraIssueMatch:
#      # specify the regexp of issue id that you can find in the title of the PR
#      # the match groups can be used to build the issue id (${1}, ${2}, etc.).
#      titleIssueIdRegexp: \[(AIRFLOW-[0-9]{4})\]
#      # the issue link to be added. ${1}, ${2} ... are replaced with the match groups from the
#      # title match (remember to use quotes)
#      descriptionIssueLink: "[${1}](https://issues.apache.org/jira/browse/${1}/)"
#    docOnlyIssueMatch:
#      titleIssueIdRegexp: \[(AIRFLOW-X{4})\]
#      descriptionIssueLink: "`Document only change, no JIRA issue`"

###### Title Validator #################################################################################################
# Verifies if commit/PR titles match the regexp specified
#verifyTitles:
#  # Regular expression that should be matched by titles of commits or PR
#  titleRegexp: ^\[AIRFLOW-[0-9]{4}\].*$|^\[AIRFLOW-XXXX\].*$
#  # If set to true, it will always check the PR title (as opposed to the individual commits).
#  alwaysUsePrTitle: true
#  # If set to true, it will only check the commit in case there is a single commit.
#  # In case of multiple commits it will check PR title.
#  # This reflects the standard behaviour of Github that for `Squash & Merge` GitHub
#  # uses the PR title rather than commit messages for the squashed commit ¯\_(ツ)_/¯
#  # For single-commit PRs it takes the squashed commit message from the commit as expected.
#  #
#  # If set to false it will check all commit messages. This is useful when you do not squash commits at merge.
#  validateEitherPrOrSingleCommitTitle: true
#  # The title the GitHub status should appear from.
#  statusTitle: "Title Validator"
#  # A custom message to be displayed when the title passes validation.
#  successMessage: "Validation successful!"
#  # A custom message to be displayed when the title fails validation.
#  # Allows insertion of ${type} (commit/PR), ${title} (the title validated) and ${regex} (the titleRegexp above).
#  failureMessage: "Wrong ${type} title: ${title}"

###### PR/Branch Up-To-Date Checker ####################################################################################
# Check if the branch is up to date with master when certain files are modified
#checkUpToDate:
#  # The default branch is "master", change the branch if you want to check against a different target branch  
#  targetBranch: master
#  files:
#  # File paths that you want to check for
#  # In this example, it checks if the branch is up to date when alembic migrations are modified in the PR.
#  # It helps avoid multiple heads in alembic migrations in a collaborative development project.
#    - airflow/migrations/*
#    - airflow/migrations/**/*
#    - airflow/alembic.ini